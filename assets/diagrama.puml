@startuml

class Interface {
    - QWidget *centralWidget
    - QToolBar *toolBar
    - QToolButton *viewButton
    - QToolButton *compressButton
    - QToolButton *decompressButton
    - QToolButton *deleteButton
    - QToolButton *infoButton
    - QLabel *inputPathLabel
    - QLabel *outputPathLabel
    - QLabel *algorithmMethodLabel

    - Adapter *adapter

    + Interface(Adapter *adapter, QWidget *parent = nullptr)
    + ~Interface()

    + void setupUI()
    + void setToolBarFont(QToolBar *toolBar)
    + void setupNavigationButtons()
    + void setupAlgorithmMenu()
    + void setupLabels()
    + void updateButtonStyles()
    + void getInfo()
    + void selectPath()
    + void removePathObject()
    + void Compress()
    + void Decompress()
}


Interface --|> QMainWindow : inherits from
Interface *-- Adapter : composition


class Adapter {

private:
    Compressor *compressor;
    Archiver *archiver;
    FileManager *fileManager;
    Benchmark *benchmark;
    Logger *logger;

public:
    Adapter(FileManager *fm, Archiver *arch, Compressor *comp, Benchmark *bm, Logger *log)
    + std::string getStat()
    + std::string getLastOPath()
    + void updatePath(std::string &path)
    + void setCompressMethod(const std::string &compressMethod)
    + void compress(const std::string &i, const std::string &o, const std::string &method)
    + void createArchive()
    + void unpackArchive()
    + void remove()
}

Adapter *-- FileManager : composition
Adapter *-- Logger : composition
Adapter *-- Benchmark : composition
Adapter *-- Compressor : composition
Adapter *-- Archiver : composition


class Benchmark {

private:
    Stack<IoPair> IoStack;

public:
    + void setValues(std::string &input, std::string &output)
    + void removeValues()
    + void removeOutput()
    + std::string getStat()
    + std::string getPrevStat()
    + IoPair getLastOperationPair()
}

Benchmark *-- Stack : composition
Benchmark -->  IoPair: depends on

class Stack<T> {
    - Node<T> *head
    - size_t stack_size

    + Stack()
    + ~Stack()
    + void push(const T &value)
    + void push(T &&value)
    + void pop()
    + T &top()
    + const T &top() const
    + bool empty() const
    + size_t size() const
    + void clear()
}

class Node<T> {
    + T value
    + Node *next

    + Node(const T &val, Node *nxt = nullptr)
    + Node(T &&val, Node *nxt = nullptr)
}

Stack *-- Node : composition

class IoPair {
    + std::string input
    + std::string output

    + IoPair(std::string &in, std::string &out)
}

class FileManager {
    - std::string currentPath
    - std::string lastModified
    - bool isRegular
    - uintmax_t size

    + int setPath(std::string &newPath)
    + int setPathObjectType()
    + int setSize()
    + int setLastModified()
    + void setInfo()
    + std::string getPath()
    + std::string getLastModified()
    + std::string getFileExtension()
    + bool getIsRegular()
    + uintmax_t getSize()
    + void getInfo()
    + void remove()
}

class Compressor {
    - std::string compressionMethod

    + Compressor()
    + ~Compressor()
    + void setCompressMethod(const std::string &compressMethod)
    + std::string getCompressMethod()
    + void compressHuffman(const std::string &file_path, const std::string &output_path)
    + void compressLZ77(const std::string &file_path, const std::string &output_path)
    + void compressLZ78(const std::string &file_path, const std::string &output_path)
    + void decompressHuffman(const std::string &file_path)
    + void decompressLZ77(const std::string &file_path)
    + void decompressLZ78(const std::string &file_path)
}

class Archiver {
    - Compressor *compressor

    + Archiver(Compressor *comp)
    + void compressDirectory(const std::string &directoryPath, const std::string &archivePath, const std::string &algMethod)
    + void decompressArchive(const std::string &archivePath)
}

Archiver *-- Compressor : composition


class Logger {
   + void printInfo(std::string &msg)
   + void printError(std::string &msg)
}


@enduml
